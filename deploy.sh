#!/bin/sh

# --- Configura√ß√£o ---
# Pare o script se qualquer comando falhar
set -e

# Nome da sua imagem no Docker Hub (usu√°rio/reposit√≥rio)
DOCKER_IMAGE_NAME="eurival/cadastropromocao-frontend"
# Tag da imagem. 'latest' √© comum, mas usar o hash do commit (git rev-parse --short HEAD) √© uma pr√°tica melhor.
IMAGE_TAG="latest"

# Configura√ß√£o do Kubernetes
K8S_NAMESPACE="cadastropromocao-apps"
K8S_DEPLOYMENT_NAME="cadastropromocao-deployment"


# --- In√≠cio do Script ---

echo "üöÄ Iniciando o processo de deploy..."

# 1. Build da imagem Docker
echo "üì¶ Construindo a imagem Docker: ${DOCKER_IMAGE_NAME}:${IMAGE_TAG}"
docker build -t "${DOCKER_IMAGE_NAME}:${IMAGE_TAG}" .

# 2. Push da imagem para o Docker Hub
echo "‚¨ÜÔ∏è Enviando a imagem para o Docker Hub..."
docker push "${DOCKER_IMAGE_NAME}:${IMAGE_TAG}"

# 3. For√ßar o rolling update no Kubernetes
# Este comando atualiza o deployment para usar a nova imagem que acabamos de enviar.
# A anota√ß√£o com a data/hora for√ßa o Kubernetes a recriar os Pods.
echo "üîÑ Realizando o rolling update no Kubernetes..."
kubectl patch deployment ${K8S_DEPLOYMENT_NAME} -n ${K8S_NAMESPACE} -p \
  "{\"spec\":{\"template\":{\"metadata\":{\"annotations\":{\"kubectl.kubernetes.io/restartedAt\":\"$(date +'%Y-%m-%dT%H:%M:%SZ')\"}}}}}"

echo "‚úÖ Deploy conclu√≠do com sucesso!"
